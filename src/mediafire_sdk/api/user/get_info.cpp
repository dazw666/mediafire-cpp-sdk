/**
 * @file get_info.cpp
 *
 * @copyright Copyright 2014 Mediafire
 *
 * This file was generated by gen_api_template.py. Do NOT edit by hand.
 */
// #define OUTPUT_DEBUG
#include "get_info.hpp"

#include <string>

#include "mediafire_sdk/api/error.hpp"
#include "mediafire_sdk/api/ptree_helpers.hpp"
#include "mediafire_sdk/utils/string.hpp"
#include "mediafire_sdk/api/session_token_api_base.hpp"

#include "boost/property_tree/json_parser.hpp"

namespace v0 = mf::api::user::get_info::v0;


#include "mediafire_sdk/api/type_helpers.hpp"

namespace mf {
namespace api {
/** API action path "user" */
namespace user {
namespace get_info {
namespace v0 {

const std::string api_path("/api/user/get_info");

// Impl ------------------------------------------------------------------------

class Impl : public SessionTokenApiBase<Response>
{
public:
    Impl();

    virtual void BuildUrl(
        std::string * path,
        std::map<std::string, std::string> * query_parts
    ) const override;

    virtual void ParseResponse( Response * response ) override;

    mf::http::SharedBuffer::Pointer GetPostData();

    mf::api::RequestMethod GetRequestMethod() const
    {
        return mf::api::RequestMethod::Post;
    }
};

Impl::Impl()
{
}

void Impl::BuildUrl(
            std::string * path,
            std::map<std::string, std::string> * /* query_parts */
    ) const
{
    *path = api_path + ".php";
}

void Impl::ParseResponse( Response * response )
{
    // This function uses return defines for readability and maintainability.
#   define return_error(error_type, error_message)                             \
    {                                                                          \
        SetError(response, error_type, error_message);                         \
        return;                                                                \
    }
    response->first_name = "";
    response->last_name = "";
    response->gender = Gender::Unknown;
    response->birth_date = boost::posix_time::not_a_date_time;
    response->created_datetime = boost::posix_time::not_a_date_time;

    // create_content_parse_single required
    if ( ! GetIfExists(
            response->pt,
            "response.user_info.ekey",
            &response->ekey ) )
        return_error(
            mf::api::api_code::ContentInvalidData,
            "missing \"response.user_info.ekey\"");

    // create_content_parse_single required
    if ( ! GetIfExists(
            response->pt,
            "response.user_info.email",
            &response->email ) )
        return_error(
            mf::api::api_code::ContentInvalidData,
            "missing \"response.user_info.email\"");

    // create_content_parse_single optional with default
    GetIfExists(
            response->pt,
            "response.user_info.first_name",
            &response->first_name);

    // create_content_parse_single optional with default
    GetIfExists(
            response->pt,
            "response.user_info.last_name",
            &response->last_name);

    // create_content_parse_single required
    if ( ! GetIfExists(
            response->pt,
            "response.user_info.display_name",
            &response->display_name ) )
        return_error(
            mf::api::api_code::ContentInvalidData,
            "missing \"response.user_info.display_name\"");

    {
        std::string optval;
        // create_content_enum_parse TSingle
        if ( GetIfExists(
                response->pt,
                "response.user_info.gender",
                &optval) )
        {
            if ( optval == "unknown" )
                response->gender = Gender::Unknown;
            else if ( optval == "male" )
                response->gender = Gender::Male;
            else if ( optval == "female" )
                response->gender = Gender::Female;
        }
    }

    // create_content_parse_single optional with default
    GetIfExists(
            response->pt,
            "response.user_info.birth_date",
            &response->birth_date);

    // create_content_parse_single optional no default
    {
        std::string optarg;
        if ( GetIfExists(
                response->pt,
                "response.user_info.location",
                &optarg) )
        {
            response->location = optarg;
        }
    }

    // create_content_parse_single optional no default
    {
        std::string optarg;
        if ( GetIfExists(
                response->pt,
                "response.user_info.website",
                &optarg) )
        {
            response->website = optarg;
        }
    }

    {
        std::string optval;
        // create_content_enum_parse TSingle
        if ( GetIfExists(
                response->pt,
                "response.user_info.premium",
                &optval) )
        {
            if ( optval == "No" )
                response->account_type = AccountType::Basic;
            else if ( optval == "Yes" )
                response->account_type = AccountType::Premium;
            else
                return_error(
                    mf::api::api_code::ContentInvalidData,
                    "invalid value in response.user_info.premium");
        }
        else
            return_error(
                mf::api::api_code::ContentInvalidData,
                "no value in response.user_info.premium");
    }

    // create_content_parse_single required
    if ( ! GetIfExists(
            response->pt,
            "response.user_info.bandwidth",
            &response->bandwidth ) )
        return_error(
            mf::api::api_code::ContentInvalidData,
            "missing \"response.user_info.bandwidth\"");

    // create_content_parse_single optional with default
    GetIfExists(
            response->pt,
            "response.user_info.created",
            &response->created_datetime);

    {
        std::string optval;
        // create_content_enum_parse TSingle
        if ( GetIfExists(
                response->pt,
                "response.user_info.validated",
                &optval) )
        {
            if ( optval == "No" )
                response->validated = Validated::NotValidated;
            else if ( optval == "Yes" )
                response->validated = Validated::Validated;
            else
                return_error(
                    mf::api::api_code::ContentInvalidData,
                    "invalid value in response.user_info.validated");
        }
        else
            return_error(
                mf::api::api_code::ContentInvalidData,
                "no value in response.user_info.validated");
    }

    // create_content_parse_single required
    if ( ! GetIfExists(
            response->pt,
            "response.user_info.max_upload_size",
            &response->max_upload_size ) )
        return_error(
            mf::api::api_code::ContentInvalidData,
            "missing \"response.user_info.max_upload_size\"");

    // create_content_parse_single required
    if ( ! GetIfExists(
            response->pt,
            "response.user_info.max_instant_upload_size",
            &response->max_instant_upload_size ) )
        return_error(
            mf::api::api_code::ContentInvalidData,
            "missing \"response.user_info.max_instant_upload_size\"");

    // create_content_parse_single optional no default
    {
        std::string optarg;
        if ( GetIfExists(
                response->pt,
                "response.user_info.tos_accepted",
                &optarg) )
        {
            response->tos_accepted = optarg;
        }
    }

    // create_content_parse_single required
    if ( ! GetIfExists(
            response->pt,
            "response.user_info.used_storage_size",
            &response->used_storage_size ) )
        return_error(
            mf::api::api_code::ContentInvalidData,
            "missing \"response.user_info.used_storage_size\"");

    // create_content_parse_single required
    if ( ! GetIfExists(
            response->pt,
            "response.user_info.base_storage",
            &response->base_storage ) )
        return_error(
            mf::api::api_code::ContentInvalidData,
            "missing \"response.user_info.base_storage\"");

    // create_content_parse_single required
    if ( ! GetIfExists(
            response->pt,
            "response.user_info.bonus_storage",
            &response->bonus_storage ) )
        return_error(
            mf::api::api_code::ContentInvalidData,
            "missing \"response.user_info.bonus_storage\"");

    // create_content_parse_single required
    if ( ! GetIfExists(
            response->pt,
            "response.user_info.storage_limit",
            &response->storage_limit ) )
        return_error(
            mf::api::api_code::ContentInvalidData,
            "missing \"response.user_info.storage_limit\"");

    {
        std::string optval;
        // create_content_enum_parse TSingle
        if ( GetIfExists(
                response->pt,
                "response.user_info.storage_limit_exceeded",
                &optval) )
        {
            if ( optval == "no" )
                response->storage_limit_exceeded = LimitExceeded::WithinBounds;
            else if ( optval == "yes" )
                response->storage_limit_exceeded = LimitExceeded::Exceeded;
            else
                return_error(
                    mf::api::api_code::ContentInvalidData,
                    "invalid value in response.user_info.storage_limit_exceeded");
        }
        else
            return_error(
                mf::api::api_code::ContentInvalidData,
                "no value in response.user_info.storage_limit_exceeded");
    }

    // create_content_parse_single required
    if ( ! GetIfExists(
            response->pt,
            "response.user_info.options",
            &response->options ) )
        return_error(
            mf::api::api_code::ContentInvalidData,
            "missing \"response.user_info.options\"");

    // create_content_parse_single optional no default
    {
        std::string optarg;
        if ( GetIfExists(
                response->pt,
                "response.user_info.facebook.facebook_id",
                &optarg) )
        {
            response->facebook_id = optarg;
        }
    }

    // create_content_parse_single optional no default
    {
        std::string optarg;
        if ( GetIfExists(
                response->pt,
                "response.user_info.facebook.date_created",
                &optarg) )
        {
            response->facebook_date_created = optarg;
        }
    }

    // create_content_parse_single optional no default
    {
        std::string optarg;
        if ( GetIfExists(
                response->pt,
                "response.user_info.facebook.facebook_url",
                &optarg) )
        {
            response->facebook_url = optarg;
        }
    }

    // create_content_parse_single optional no default
    {
        std::string optarg;
        if ( GetIfExists(
                response->pt,
                "response.user_info.facebook.name",
                &optarg) )
        {
            response->facebook_name = optarg;
        }
    }

    // create_content_parse_single optional no default
    {
        std::string optarg;
        if ( GetIfExists(
                response->pt,
                "response.user_info.facebook.firstname",
                &optarg) )
        {
            response->facebook_firstname = optarg;
        }
    }

    // create_content_parse_single optional no default
    {
        std::string optarg;
        if ( GetIfExists(
                response->pt,
                "response.user_info.facebook.lastname",
                &optarg) )
        {
            response->facebook_lastname = optarg;
        }
    }

    // create_content_parse_single optional no default
    {
        std::string optarg;
        if ( GetIfExists(
                response->pt,
                "response.user_info.facebook.hometown",
                &optarg) )
        {
            response->facebook_hometown = optarg;
        }
    }

    // create_content_parse_single optional no default
    {
        std::string optarg;
        if ( GetIfExists(
                response->pt,
                "response.user_info.facebook.location",
                &optarg) )
        {
            response->facebook_location = optarg;
        }
    }

    // create_content_parse_single optional no default
    {
        std::string optarg;
        if ( GetIfExists(
                response->pt,
                "response.user_info.facebook.i18n",
                &optarg) )
        {
            response->facebook_i18n = optarg;
        }
    }

    // create_content_parse_single optional no default
    {
        int32_t optarg;
        if ( GetIfExists(
                response->pt,
                "response.user_info.facebook.timezone",
                &optarg) )
        {
            response->facebook_timezone = optarg;
        }
    }

    {
        std::string optval;
        // create_content_enum_parse TSingle
        if ( GetIfExists(
                response->pt,
                "response.user_info.facebook.linked",
                &optval) )
        {
            if ( optval == "no" )
                response->facebook_linked = FacebookLinked::Unlinked;
            else if ( optval == "yes" )
                response->facebook_linked = FacebookLinked::Linked;
        }
    }

    // create_content_parse_single optional no default
    {
        std::string optarg;
        if ( GetIfExists(
                response->pt,
                "response.user_info.twitter.twitter_id",
                &optarg) )
        {
            response->twitter_id = optarg;
        }
    }

    // create_content_parse_single optional no default
    {
        std::string optarg;
        if ( GetIfExists(
                response->pt,
                "response.user_info.twitter.date_created",
                &optarg) )
        {
            response->twitter_date_created = optarg;
        }
    }

    // create_content_parse_single optional no default
    {
        std::string optarg;
        if ( GetIfExists(
                response->pt,
                "response.user_info.twitter.screen_name",
                &optarg) )
        {
            response->twitter_screen_name = optarg;
        }
    }

    // create_content_parse_single optional no default
    {
        std::string optarg;
        if ( GetIfExists(
                response->pt,
                "response.user_info.twitter.name",
                &optarg) )
        {
            response->twitter_name = optarg;
        }
    }

    // create_content_parse_single optional no default
    {
        std::string optarg;
        if ( GetIfExists(
                response->pt,
                "response.user_info.twitter.i18n",
                &optarg) )
        {
            response->twitter_i18n = optarg;
        }
    }

    {
        std::string optval;
        // create_content_enum_parse TSingle
        if ( GetIfExists(
                response->pt,
                "response.user_info.twitter.linked",
                &optval) )
        {
            if ( optval == "no" )
                response->twitter_linked = TwitterLinked::Unlinked;
            else if ( optval == "yes" )
                response->twitter_linked = TwitterLinked::Linked;
        }
    }

#   undef return_error
}

mf::http::SharedBuffer::Pointer Impl::GetPostData()
{
    std::map<std::string, std::string> parts;


    std::string post_data = MakePost(api_path + ".php", parts);
    AddDebugText(" POST data: " + post_data + "\n");
    return mf::http::SharedBuffer::Create(post_data);
}

// Request ---------------------------------------------------------------------

Request::Request() :
    impl_(new Impl())
{
}

void Request::SetCallback( CallbackType callback_function )
{
    impl_->SetCallback(callback_function);
}

void Request::HandleContent(
        const std::string & url,
        const mf::http::Headers & headers,
        const std::string & content
    )
{
    impl_->HandleContent(url, headers, content);
}

void Request::HandleError(
        const std::string & url,
        std::error_code ec,
        const std::string & error_string
    )
{
    impl_->HandleError(url, ec, error_string);
}

std::string Request::Url(const std::string & hostname) const
{
    return impl_->Url(hostname);
}

void Request::SetSessionToken(
        std::string session_token,
        std::string time,
        int secret_key
    )
{
    impl_->SetSessionToken(session_token, time, secret_key);
}

mf::http::SharedBuffer::Pointer Request::GetPostData()
{
    return impl_->GetPostData();
}

}  // namespace v0
}  // namespace get_info
}  // namespace user
}  // namespace api
}  // namespace mf
