/**
 * @file add.cpp
 *
 * @copyright Copyright 2014 Mediafire
 *
 * This file was generated by gen_api_template.py. Do NOT edit by hand.
 */
// #define OUTPUT_DEBUG
#include "v1_1.hpp"

#include <string>

#include "mediafire_sdk/api/error.hpp"
#include "mediafire_sdk/api/ptree_helpers.hpp"
#include "mediafire_sdk/utils/string.hpp"
#include "mediafire_sdk/api/session_token_api_base.hpp"

#include "boost/property_tree/json_parser.hpp"

namespace v1_1 = mf::api::contact::add::v1_1;


namespace {
std::string AsString(const v1_1::ContactType & value)
{
    if (value == v1_1::ContactType::MediaFire)
        return "mediafire";
    if (value == v1_1::ContactType::FaceBook)
        return "facebook";
    if (value == v1_1::ContactType::GMail)
        return "gmail";
    if (value == v1_1::ContactType::Twitter)
        return "twitter";
    return mf::utils::to_string(static_cast<uint32_t>(value));
}
std::string AsString(const v1_1::Gender & value)
{
    if (value == v1_1::Gender::Male)
        return "male";
    if (value == v1_1::Gender::Female)
        return "female";
    if (value == v1_1::Gender::None)
        return "none";
    return mf::utils::to_string(static_cast<uint32_t>(value));
}
}  // namespace

#include "mediafire_sdk/api/type_helpers.hpp"

namespace mf {
namespace api {
/** API action path "contact" */
namespace contact {
namespace add {
namespace v1_1 {

const std::string api_path("/api/1.1/contact/add");

// Impl ------------------------------------------------------------------------

class Impl : public SessionTokenApiBase<Response>
{
public:
    Impl();

    boost::optional<ContactType> contact_type_;
    boost::optional<std::string> contact_key_;
    boost::optional<std::string> display_name_;
    boost::optional<std::string> first_name_;
    boost::optional<std::string> last_name_;
    boost::optional<std::string> avatar_url_;
    boost::optional<std::string> source_user_id_;
    boost::optional<std::string> email_;
    boost::optional<std::string> phone_number_;
    boost::optional<std::string> birthdate_;
    boost::optional<std::string> location_;
    boost::optional<Gender> gender_;
    boost::optional<std::string> website_;
    boost::optional<std::string> group_id_;
    virtual void BuildUrl(
        std::string * path,
        std::map<std::string, std::string> * query_parts
    ) const override;

    virtual void ParseResponse( Response * /* response */ ) override;

    mf::http::SharedBuffer::Pointer GetPostData();

    mf::api::RequestMethod GetRequestMethod() const
    {
        return mf::api::RequestMethod::Post;
    }
};

Impl::Impl()
{
}

void Impl::BuildUrl(
            std::string * path,
            std::map<std::string, std::string> * query_parts
    ) const
{
    *path = api_path + ".php";
}

void Impl::ParseResponse( Response * /* response */ )
{
    // This function uses return defines for readability and maintainability.
#   define return_error(error_type, error_message)                             \
    {                                                                          \
        SetError(response, error_type, error_message);                         \
        return;                                                                \
    }


#   undef return_error
}

mf::http::SharedBuffer::Pointer Impl::GetPostData()
{
    std::map<std::string, std::string> parts;

    if (contact_type_)
        parts["contact_type"] = AsString(*contact_type_);
    if (contact_key_)
        parts["contact_key"] = *contact_key_;
    if (display_name_)
        parts["display_name"] = *display_name_;
    if (first_name_)
        parts["first_name"] = *first_name_;
    if (last_name_)
        parts["last_name"] = *last_name_;
    if (avatar_url_)
        parts["avatar"] = *avatar_url_;
    if (source_user_id_)
        parts["source_uid"] = *source_user_id_;
    if (email_)
        parts["email"] = *email_;
    if (phone_number_)
        parts["phone"] = *phone_number_;
    if (birthdate_)
        parts["birthdate"] = *birthdate_;
    if (location_)
        parts["location"] = *location_;
    if (gender_)
        parts["gender"] = AsString(*gender_);
    if (website_)
        parts["website"] = *website_;
    if (group_id_)
        parts["group_id"] = *group_id_;

    std::string post_data = MakePost(api_path + ".php", parts);
    AddDebugText(" POST data: " + post_data + "\n");
    return mf::http::SharedBuffer::Create(post_data);
}

// Request ---------------------------------------------------------------------

Request::Request() :
    impl_(new Impl())
{
}

void Request::SetCallback( CallbackType callback_function )
{
    impl_->SetCallback(callback_function);
}

void Request::HandleContent(
        const std::string & url,
        const mf::http::Headers & headers,
        const std::string & content
    )
{
    impl_->HandleContent(url, headers, content);
}

void Request::HandleError(
        const std::string & url,
        std::error_code ec,
        const std::string & error_string
    )
{
    impl_->HandleError(url, ec, error_string);
}

std::string Request::Url(const std::string & hostname) const
{
    return impl_->Url(hostname);
}

void Request::SetSessionToken(
        std::string session_token,
        std::string time,
        int secret_key
    )
{
    impl_->SetSessionToken(session_token, time, secret_key);
}

void Request::SetContactType(ContactType contact_type)
{
    impl_->contact_type_ = contact_type;
}

void Request::SetContactKey(std::string contact_key)
{
    impl_->contact_key_ = contact_key;
}

void Request::SetDisplayName(std::string display_name)
{
    impl_->display_name_ = display_name;
}

void Request::SetFirstName(std::string first_name)
{
    impl_->first_name_ = first_name;
}

void Request::SetLastName(std::string last_name)
{
    impl_->last_name_ = last_name;
}

void Request::SetAvatarUrl(std::string avatar_url)
{
    impl_->avatar_url_ = avatar_url;
}

void Request::SetSourceUserId(std::string source_user_id)
{
    impl_->source_user_id_ = source_user_id;
}

void Request::SetEmail(std::string email)
{
    impl_->email_ = email;
}

void Request::SetPhoneNumber(std::string phone_number)
{
    impl_->phone_number_ = phone_number;
}

void Request::SetBirthdate(std::string birthdate)
{
    impl_->birthdate_ = birthdate;
}

void Request::SetLocation(std::string location)
{
    impl_->location_ = location;
}

void Request::SetGender(Gender gender)
{
    impl_->gender_ = gender;
}

void Request::SetWebsite(std::string website)
{
    impl_->website_ = website;
}

void Request::SetGroupId(std::string group_id)
{
    impl_->group_id_ = group_id;
}

mf::http::SharedBuffer::Pointer Request::GetPostData()
{
    return impl_->GetPostData();
}

}  // namespace v1_1
}  // namespace add
}  // namespace contact
}  // namespace api
}  // namespace mf
